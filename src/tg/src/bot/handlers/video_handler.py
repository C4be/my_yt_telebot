import io
from aiogram import Router, F
from aiogram.types import Message
from db.engine import get_db_session
from domain.services.video_service import VideoService
from core.logging import new_logger

__NAME: str = "video_handler"
__LOGGER = new_logger(__NAME, to_file=False)

router = Router(name=__NAME)


async def save_video_if_new(message: Message):
    if message.video is None:
        await message.answer("‚ö†Ô∏è –ù–µ —Å–º–æ–≥ –ø–æ—Ä–µ–¥–µ–ª–µ–∏—Ç—å ID –≤–∏–¥–µ–æ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º!")
        return

    tg_id = str(message.video.file_id)
    title = f"–í–∏–¥–µ–æ –æ—Ç {message.from_user.username or message.from_user.id}"

    async for db in get_db_session():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ –≤–∏–¥–µ–æ
        existing_video = await VideoService.get_video_by_tg_id(db, tg_id)
        if existing_video:
            __LOGGER.info(f"–í–∏–¥–µ–æ {tg_id} —É–∂–µ –≤ —Å–∏—Å—Ç–µ–º–µ")
            await message.answer(
                "‚ö†Ô∏è –≠—Ç–æ –≤–∏–¥–µ–æ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—É, –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å –Ω–µ—Ç —Å–º—ã—Å–ª–∞!"
            )
            return

        # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ –≤ –ø–∞–º—è—Ç—å
        video_io = io.BytesIO()
        try:
            bot = message.bot  # 1. –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Bot
            file = await bot.get_file(
                tg_id
            )  # 2. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –ø–æ file_id
            await bot.download_file(
                file.file_path, destination=video_io
            )  # 3. –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        except Exception as e:
            __LOGGER.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª {tg_id}: {e}")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å —Å–µ—Ä–≤–µ—Ä–æ–≤ Telegram."
            )
            return
        video_io.seek(0)  # –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Mongo + Postgres
        video_record = await VideoService.create_video_record(
            db=db,
            tg_id=tg_id,
            video_bytes=video_io.read(),
            filename=f"{tg_id}.mp4",
            title=title,
        )

    await message.answer(
        f"‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\nPostgres ID: {video_record.id}\nMongoDB ID: {video_record.mongo_db_id}"
    )


# ------------------------
# –•—ç–Ω–¥–ª–µ—Ä—ã
# ------------------------


@router.message(F.video & F.forward_from)
async def handle_forwarded_video(message: Message):
    await message.answer("üì§ –≠—Ç–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ!")
    await save_video_if_new(message)


@router.message(F.video & F.forward_from_chat)
async def handle_forwarded_video_from_chat(message: Message):
    await message.answer("üì§ –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ –∏–∑ —á–∞—Ç–∞!")
    await save_video_if_new(message)


@router.message(F.video)
async def handle_video(message: Message):
    await message.answer("üì§ –≠—Ç–æ –æ–±—ã—á–Ω–æ–µ –≤–∏–¥–µ–æ!")
    await save_video_if_new(message)


@router.message(F.reply_to_message & F.reply_to_message.video)
async def handle_reply_with_video(message: Message):
    await message.answer("üì§ –≠—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∏–¥–µ–æ!")
    await save_video_if_new(message)
