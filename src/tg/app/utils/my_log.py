import shutil
import logging
from pathlib import Path
from datetime import datetime


class LogManager:
    """
    –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–≥–≥–µ—Ä–æ–≤.
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—ë—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:
      logs/<DD-MM-YYYY>/<logger_name>.log
    """

    _BASE_DIR = Path("logs")
    _TIME_FROMAT = "%d-%m-%Y"
    _DATE_TIME_FROMAT = "%Y-%m-%d %H:%M:%S"
    _LOG_FROMAT = "%(asctime)s - [%(levelname)s] - %(name)s - %(message)s"
    _ENCODING = "utf-8"

    @staticmethod
    def _get_daily_log_dir() -> Path:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è, —Å–æ–∑–¥–∞–≤–∞—è –µ—ë –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
        date_str = datetime.now().strftime(LogManager._TIME_FROMAT)
        daily_dir = LogManager._BASE_DIR / date_str
        daily_dir.mkdir(parents=True, exist_ok=True)
        return daily_dir

    @staticmethod
    def new_logger(
        name: str, to_file: bool = True, level: int = logging.INFO
    ) -> logging.Logger:
        """
        –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π –ª–æ–≥–≥–µ—Ä —Å –∏–º–µ–Ω–µ–º `name`.

        :param name: –ò–º—è –ª–æ–≥–≥–µ—Ä–∞
        :param to_file: –ï—Å–ª–∏ True ‚Äî —Å–æ–∑–¥–∞—ë—Ç –ª–æ–≥-—Ñ–∞–π–ª
        :param level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        :return: logging.Logger
        """
        logger = logging.getLogger(name)
        logger.setLevel(level)

        # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ö–µ–Ω–¥–ª–µ—Ä—ã
        if logger.handlers:
            return logger

        formatter = logging.Formatter(
            LogManager._LOG_FROMAT,
            datefmt=LogManager._DATE_TIME_FROMAT,
        )

        # === –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ ===
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(formatter)
        logger.addHandler(console_handler)

        # === –§–∞–π–ª–æ–≤—ã–π –≤—ã–≤–æ–¥ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è) ===
        if to_file:
            daily_dir = LogManager._get_daily_log_dir()
            log_path = daily_dir / f"{name}.log"

            file_handler = logging.FileHandler(log_path, encoding=LogManager._ENCODING)
            file_handler.setFormatter(formatter)
            logger.addHandler(file_handler)

        return logger

    @staticmethod
    def clear_old_logs() -> None:
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –ª–æ–≥–∏, –∫—Ä–æ–º–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
        today = datetime.now().strftime(LogManager._TIME_FROMAT)

        if not LogManager._BASE_DIR.exists():
            print("–ü–∞–ø–∫–∞ logs –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª–µ–Ω–æ.")
            return

        for directory in LogManager._BASE_DIR.iterdir():
            if directory.is_dir() and directory.name != today:
                shutil.rmtree(directory, ignore_errors=True)
                print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞ –ª–æ–≥–æ–≤: {directory.name}")

        print("‚úÖ –°—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã, —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
